// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enermon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_enermon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_enermon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_enermon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_enermon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enermon_2eproto;
namespace enermon {
class iotData;
class iotDataDefaultTypeInternal;
extern iotDataDefaultTypeInternal _iotData_default_instance_;
class mobileData;
class mobileDataDefaultTypeInternal;
extern mobileDataDefaultTypeInternal _mobileData_default_instance_;
class users;
class usersDefaultTypeInternal;
extern usersDefaultTypeInternal _users_default_instance_;
}  // namespace enermon
PROTOBUF_NAMESPACE_OPEN
template<> ::enermon::iotData* Arena::CreateMaybeMessage<::enermon::iotData>(Arena*);
template<> ::enermon::mobileData* Arena::CreateMaybeMessage<::enermon::mobileData>(Arena*);
template<> ::enermon::users* Arena::CreateMaybeMessage<::enermon::users>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enermon {

enum toggle : int {
  HIDDEN = 0,
  INACTIVE = 1,
  OFF = 10,
  ON = 11,
  toggle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  toggle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool toggle_IsValid(int value);
constexpr toggle toggle_MIN = HIDDEN;
constexpr toggle toggle_MAX = ON;
constexpr int toggle_ARRAYSIZE = toggle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* toggle_descriptor();
template<typename T>
inline const std::string& toggle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, toggle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function toggle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    toggle_descriptor(), enum_t_value);
}
inline bool toggle_Parse(
    const std::string& name, toggle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<toggle>(
    toggle_descriptor(), name, value);
}
// ===================================================================

class users PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enermon.users) */ {
 public:
  inline users() : users(nullptr) {};
  virtual ~users();

  users(const users& from);
  users(users&& from) noexcept
    : users() {
    *this = ::std::move(from);
  }

  inline users& operator=(const users& from) {
    CopyFrom(from);
    return *this;
  }
  inline users& operator=(users&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const users& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const users* internal_default_instance() {
    return reinterpret_cast<const users*>(
               &_users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(users& a, users& b) {
    a.Swap(&b);
  }
  inline void Swap(users* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(users* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline users* New() const final {
    return CreateMaybeMessage<users>(nullptr);
  }

  users* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<users>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const users& from);
  void MergeFrom(const users& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(users* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enermon.users";
  }
  protected:
  explicit users(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enermon_2eproto);
    return ::descriptor_table_enermon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:enermon.users)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enermon_2eproto;
};
// -------------------------------------------------------------------

class iotData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enermon.iotData) */ {
 public:
  inline iotData() : iotData(nullptr) {};
  virtual ~iotData();

  iotData(const iotData& from);
  iotData(iotData&& from) noexcept
    : iotData() {
    *this = ::std::move(from);
  }

  inline iotData& operator=(const iotData& from) {
    CopyFrom(from);
    return *this;
  }
  inline iotData& operator=(iotData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iotData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iotData* internal_default_instance() {
    return reinterpret_cast<const iotData*>(
               &_iotData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(iotData& a, iotData& b) {
    a.Swap(&b);
  }
  inline void Swap(iotData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iotData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iotData* New() const final {
    return CreateMaybeMessage<iotData>(nullptr);
  }

  iotData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iotData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iotData& from);
  void MergeFrom(const iotData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iotData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enermon.iotData";
  }
  protected:
  explicit iotData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enermon_2eproto);
    return ::descriptor_table_enermon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kSwtchFieldNumber = 4,
    kKeyFieldNumber = 1,
    kMacAddressFieldNumber = 2,
  };
  // repeated float value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // repeated .enermon.toggle swtch = 4;
  int swtch_size() const;
  private:
  int _internal_swtch_size() const;
  public:
  void clear_swtch();
  private:
  ::enermon::toggle _internal_swtch(int index) const;
  void _internal_add_swtch(::enermon::toggle value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_swtch();
  public:
  ::enermon::toggle swtch(int index) const;
  void set_swtch(int index, ::enermon::toggle value);
  void add_swtch(::enermon::toggle value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& swtch() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_swtch();

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string macAddress = 2;
  void clear_macaddress();
  const std::string& macaddress() const;
  void set_macaddress(const std::string& value);
  void set_macaddress(std::string&& value);
  void set_macaddress(const char* value);
  void set_macaddress(const char* value, size_t size);
  std::string* mutable_macaddress();
  std::string* release_macaddress();
  void set_allocated_macaddress(std::string* macaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_macaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_macaddress(
      std::string* macaddress);
  private:
  const std::string& _internal_macaddress() const;
  void _internal_set_macaddress(const std::string& value);
  std::string* _internal_mutable_macaddress();
  public:

  // @@protoc_insertion_point(class_scope:enermon.iotData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> swtch_;
  mutable std::atomic<int> _swtch_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enermon_2eproto;
};
// -------------------------------------------------------------------

class mobileData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enermon.mobileData) */ {
 public:
  inline mobileData() : mobileData(nullptr) {};
  virtual ~mobileData();

  mobileData(const mobileData& from);
  mobileData(mobileData&& from) noexcept
    : mobileData() {
    *this = ::std::move(from);
  }

  inline mobileData& operator=(const mobileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline mobileData& operator=(mobileData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mobileData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mobileData* internal_default_instance() {
    return reinterpret_cast<const mobileData*>(
               &_mobileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(mobileData& a, mobileData& b) {
    a.Swap(&b);
  }
  inline void Swap(mobileData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mobileData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mobileData* New() const final {
    return CreateMaybeMessage<mobileData>(nullptr);
  }

  mobileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mobileData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mobileData& from);
  void MergeFrom(const mobileData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mobileData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enermon.mobileData";
  }
  protected:
  explicit mobileData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enermon_2eproto);
    return ::descriptor_table_enermon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwtchFieldNumber = 5,
    kKeyFieldNumber = 1,
    kUserFieldNumber = 2,
    kValueFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // repeated .enermon.toggle swtch = 5;
  int swtch_size() const;
  private:
  int _internal_swtch_size() const;
  public:
  void clear_swtch();
  private:
  ::enermon::toggle _internal_swtch(int index) const;
  void _internal_add_swtch(::enermon::toggle value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_swtch();
  public:
  ::enermon::toggle swtch(int index) const;
  void set_swtch(int index, ::enermon::toggle value);
  void add_swtch(::enermon::toggle value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& swtch() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_swtch();

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string user = 2;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // float value = 3;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // uint32 index = 4;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:enermon.mobileData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> swtch_;
  mutable std::atomic<int> _swtch_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  float value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enermon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// users

// repeated string name = 1;
inline int users::_internal_name_size() const {
  return name_.size();
}
inline int users::name_size() const {
  return _internal_name_size();
}
inline void users::clear_name() {
  name_.Clear();
}
inline std::string* users::add_name() {
  // @@protoc_insertion_point(field_add_mutable:enermon.users.name)
  return _internal_add_name();
}
inline const std::string& users::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& users::name(int index) const {
  // @@protoc_insertion_point(field_get:enermon.users.name)
  return _internal_name(index);
}
inline std::string* users::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:enermon.users.name)
  return name_.Mutable(index);
}
inline void users::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enermon.users.name)
  name_.Mutable(index)->assign(value);
}
inline void users::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enermon.users.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void users::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enermon.users.name)
}
inline void users::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enermon.users.name)
}
inline std::string* users::_internal_add_name() {
  return name_.Add();
}
inline void users::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enermon.users.name)
}
inline void users::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enermon.users.name)
}
inline void users::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enermon.users.name)
}
inline void users::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enermon.users.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
users::name() const {
  // @@protoc_insertion_point(field_list:enermon.users.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
users::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:enermon.users.name)
  return &name_;
}

// -------------------------------------------------------------------

// iotData

// string key = 1;
inline void iotData::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& iotData::key() const {
  // @@protoc_insertion_point(field_get:enermon.iotData.key)
  return _internal_key();
}
inline void iotData::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:enermon.iotData.key)
}
inline std::string* iotData::mutable_key() {
  // @@protoc_insertion_point(field_mutable:enermon.iotData.key)
  return _internal_mutable_key();
}
inline const std::string& iotData::_internal_key() const {
  return key_.Get();
}
inline void iotData::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void iotData::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enermon.iotData.key)
}
inline void iotData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enermon.iotData.key)
}
inline void iotData::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enermon.iotData.key)
}
inline std::string* iotData::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* iotData::release_key() {
  // @@protoc_insertion_point(field_release:enermon.iotData.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void iotData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enermon.iotData.key)
}
inline std::string* iotData::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enermon.iotData.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void iotData::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enermon.iotData.key)
}

// string macAddress = 2;
inline void iotData::clear_macaddress() {
  macaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& iotData::macaddress() const {
  // @@protoc_insertion_point(field_get:enermon.iotData.macAddress)
  return _internal_macaddress();
}
inline void iotData::set_macaddress(const std::string& value) {
  _internal_set_macaddress(value);
  // @@protoc_insertion_point(field_set:enermon.iotData.macAddress)
}
inline std::string* iotData::mutable_macaddress() {
  // @@protoc_insertion_point(field_mutable:enermon.iotData.macAddress)
  return _internal_mutable_macaddress();
}
inline const std::string& iotData::_internal_macaddress() const {
  return macaddress_.Get();
}
inline void iotData::_internal_set_macaddress(const std::string& value) {
  
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void iotData::set_macaddress(std::string&& value) {
  
  macaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enermon.iotData.macAddress)
}
inline void iotData::set_macaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enermon.iotData.macAddress)
}
inline void iotData::set_macaddress(const char* value,
    size_t size) {
  
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enermon.iotData.macAddress)
}
inline std::string* iotData::_internal_mutable_macaddress() {
  
  return macaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* iotData::release_macaddress() {
  // @@protoc_insertion_point(field_release:enermon.iotData.macAddress)
  return macaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void iotData::set_allocated_macaddress(std::string* macaddress) {
  if (macaddress != nullptr) {
    
  } else {
    
  }
  macaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), macaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enermon.iotData.macAddress)
}
inline std::string* iotData::unsafe_arena_release_macaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enermon.iotData.macAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return macaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void iotData::unsafe_arena_set_allocated_macaddress(
    std::string* macaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (macaddress != nullptr) {
    
  } else {
    
  }
  macaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      macaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enermon.iotData.macAddress)
}

// repeated float value = 3;
inline int iotData::_internal_value_size() const {
  return value_.size();
}
inline int iotData::value_size() const {
  return _internal_value_size();
}
inline void iotData::clear_value() {
  value_.Clear();
}
inline float iotData::_internal_value(int index) const {
  return value_.Get(index);
}
inline float iotData::value(int index) const {
  // @@protoc_insertion_point(field_get:enermon.iotData.value)
  return _internal_value(index);
}
inline void iotData::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:enermon.iotData.value)
}
inline void iotData::_internal_add_value(float value) {
  value_.Add(value);
}
inline void iotData::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:enermon.iotData.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
iotData::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
iotData::value() const {
  // @@protoc_insertion_point(field_list:enermon.iotData.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
iotData::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
iotData::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:enermon.iotData.value)
  return _internal_mutable_value();
}

// repeated .enermon.toggle swtch = 4;
inline int iotData::_internal_swtch_size() const {
  return swtch_.size();
}
inline int iotData::swtch_size() const {
  return _internal_swtch_size();
}
inline void iotData::clear_swtch() {
  swtch_.Clear();
}
inline ::enermon::toggle iotData::_internal_swtch(int index) const {
  return static_cast< ::enermon::toggle >(swtch_.Get(index));
}
inline ::enermon::toggle iotData::swtch(int index) const {
  // @@protoc_insertion_point(field_get:enermon.iotData.swtch)
  return _internal_swtch(index);
}
inline void iotData::set_swtch(int index, ::enermon::toggle value) {
  swtch_.Set(index, value);
  // @@protoc_insertion_point(field_set:enermon.iotData.swtch)
}
inline void iotData::_internal_add_swtch(::enermon::toggle value) {
  swtch_.Add(value);
}
inline void iotData::add_swtch(::enermon::toggle value) {
  // @@protoc_insertion_point(field_add:enermon.iotData.swtch)
  _internal_add_swtch(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
iotData::swtch() const {
  // @@protoc_insertion_point(field_list:enermon.iotData.swtch)
  return swtch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
iotData::_internal_mutable_swtch() {
  return &swtch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
iotData::mutable_swtch() {
  // @@protoc_insertion_point(field_mutable_list:enermon.iotData.swtch)
  return _internal_mutable_swtch();
}

// -------------------------------------------------------------------

// mobileData

// string key = 1;
inline void mobileData::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& mobileData::key() const {
  // @@protoc_insertion_point(field_get:enermon.mobileData.key)
  return _internal_key();
}
inline void mobileData::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:enermon.mobileData.key)
}
inline std::string* mobileData::mutable_key() {
  // @@protoc_insertion_point(field_mutable:enermon.mobileData.key)
  return _internal_mutable_key();
}
inline const std::string& mobileData::_internal_key() const {
  return key_.Get();
}
inline void mobileData::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void mobileData::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enermon.mobileData.key)
}
inline void mobileData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enermon.mobileData.key)
}
inline void mobileData::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enermon.mobileData.key)
}
inline std::string* mobileData::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* mobileData::release_key() {
  // @@protoc_insertion_point(field_release:enermon.mobileData.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mobileData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enermon.mobileData.key)
}
inline std::string* mobileData::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enermon.mobileData.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void mobileData::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enermon.mobileData.key)
}

// string user = 2;
inline void mobileData::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& mobileData::user() const {
  // @@protoc_insertion_point(field_get:enermon.mobileData.user)
  return _internal_user();
}
inline void mobileData::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:enermon.mobileData.user)
}
inline std::string* mobileData::mutable_user() {
  // @@protoc_insertion_point(field_mutable:enermon.mobileData.user)
  return _internal_mutable_user();
}
inline const std::string& mobileData::_internal_user() const {
  return user_.Get();
}
inline void mobileData::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void mobileData::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enermon.mobileData.user)
}
inline void mobileData::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enermon.mobileData.user)
}
inline void mobileData::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enermon.mobileData.user)
}
inline std::string* mobileData::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* mobileData::release_user() {
  // @@protoc_insertion_point(field_release:enermon.mobileData.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mobileData::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enermon.mobileData.user)
}
inline std::string* mobileData::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enermon.mobileData.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void mobileData::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enermon.mobileData.user)
}

// float value = 3;
inline void mobileData::clear_value() {
  value_ = 0;
}
inline float mobileData::_internal_value() const {
  return value_;
}
inline float mobileData::value() const {
  // @@protoc_insertion_point(field_get:enermon.mobileData.value)
  return _internal_value();
}
inline void mobileData::_internal_set_value(float value) {
  
  value_ = value;
}
inline void mobileData::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:enermon.mobileData.value)
}

// uint32 index = 4;
inline void mobileData::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mobileData::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mobileData::index() const {
  // @@protoc_insertion_point(field_get:enermon.mobileData.index)
  return _internal_index();
}
inline void mobileData::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void mobileData::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:enermon.mobileData.index)
}

// repeated .enermon.toggle swtch = 5;
inline int mobileData::_internal_swtch_size() const {
  return swtch_.size();
}
inline int mobileData::swtch_size() const {
  return _internal_swtch_size();
}
inline void mobileData::clear_swtch() {
  swtch_.Clear();
}
inline ::enermon::toggle mobileData::_internal_swtch(int index) const {
  return static_cast< ::enermon::toggle >(swtch_.Get(index));
}
inline ::enermon::toggle mobileData::swtch(int index) const {
  // @@protoc_insertion_point(field_get:enermon.mobileData.swtch)
  return _internal_swtch(index);
}
inline void mobileData::set_swtch(int index, ::enermon::toggle value) {
  swtch_.Set(index, value);
  // @@protoc_insertion_point(field_set:enermon.mobileData.swtch)
}
inline void mobileData::_internal_add_swtch(::enermon::toggle value) {
  swtch_.Add(value);
}
inline void mobileData::add_swtch(::enermon::toggle value) {
  // @@protoc_insertion_point(field_add:enermon.mobileData.swtch)
  _internal_add_swtch(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
mobileData::swtch() const {
  // @@protoc_insertion_point(field_list:enermon.mobileData.swtch)
  return swtch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
mobileData::_internal_mutable_swtch() {
  return &swtch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
mobileData::mutable_swtch() {
  // @@protoc_insertion_point(field_mutable_list:enermon.mobileData.swtch)
  return _internal_mutable_swtch();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enermon

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::enermon::toggle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enermon::toggle>() {
  return ::enermon::toggle_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_enermon_2eproto
