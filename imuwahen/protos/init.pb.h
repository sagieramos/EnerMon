// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: init.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_init_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_init_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_init_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_init_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_init_2eproto;
namespace IOT {
class iot;
class iotDefaultTypeInternal;
extern iotDefaultTypeInternal _iot_default_instance_;
class iot_data;
class iot_dataDefaultTypeInternal;
extern iot_dataDefaultTypeInternal _iot_data_default_instance_;
class mobile;
class mobileDefaultTypeInternal;
extern mobileDefaultTypeInternal _mobile_default_instance_;
class mobile_data;
class mobile_dataDefaultTypeInternal;
extern mobile_dataDefaultTypeInternal _mobile_data_default_instance_;
}  // namespace IOT
PROTOBUF_NAMESPACE_OPEN
template<> ::IOT::iot* Arena::CreateMaybeMessage<::IOT::iot>(Arena*);
template<> ::IOT::iot_data* Arena::CreateMaybeMessage<::IOT::iot_data>(Arena*);
template<> ::IOT::mobile* Arena::CreateMaybeMessage<::IOT::mobile>(Arena*);
template<> ::IOT::mobile_data* Arena::CreateMaybeMessage<::IOT::mobile_data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IOT {

// ===================================================================

class iot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IOT.iot) */ {
 public:
  inline iot() : iot(nullptr) {};
  virtual ~iot();

  iot(const iot& from);
  iot(iot&& from) noexcept
    : iot() {
    *this = ::std::move(from);
  }

  inline iot& operator=(const iot& from) {
    CopyFrom(from);
    return *this;
  }
  inline iot& operator=(iot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iot* internal_default_instance() {
    return reinterpret_cast<const iot*>(
               &_iot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(iot& a, iot& b) {
    a.Swap(&b);
  }
  inline void Swap(iot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iot* New() const final {
    return CreateMaybeMessage<iot>(nullptr);
  }

  iot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iot& from);
  void MergeFrom(const iot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IOT.iot";
  }
  protected:
  explicit iot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_init_2eproto);
    return ::descriptor_table_init_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorFieldNumber = 3,
    kKeyFieldNumber = 1,
    kMacAddressFieldNumber = 2,
  };
  // repeated float sensor = 3;
  int sensor_size() const;
  private:
  int _internal_sensor_size() const;
  public:
  void clear_sensor();
  private:
  float _internal_sensor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sensor() const;
  void _internal_add_sensor(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sensor();
  public:
  float sensor(int index) const;
  void set_sensor(int index, float value);
  void add_sensor(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sensor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sensor();

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string macAddress = 2;
  void clear_macaddress();
  const std::string& macaddress() const;
  void set_macaddress(const std::string& value);
  void set_macaddress(std::string&& value);
  void set_macaddress(const char* value);
  void set_macaddress(const char* value, size_t size);
  std::string* mutable_macaddress();
  std::string* release_macaddress();
  void set_allocated_macaddress(std::string* macaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_macaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_macaddress(
      std::string* macaddress);
  private:
  const std::string& _internal_macaddress() const;
  void _internal_set_macaddress(const std::string& value);
  std::string* _internal_mutable_macaddress();
  public:

  // @@protoc_insertion_point(class_scope:IOT.iot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sensor_;
  mutable std::atomic<int> _sensor_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2eproto;
};
// -------------------------------------------------------------------

class mobile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IOT.mobile) */ {
 public:
  inline mobile() : mobile(nullptr) {};
  virtual ~mobile();

  mobile(const mobile& from);
  mobile(mobile&& from) noexcept
    : mobile() {
    *this = ::std::move(from);
  }

  inline mobile& operator=(const mobile& from) {
    CopyFrom(from);
    return *this;
  }
  inline mobile& operator=(mobile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mobile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mobile* internal_default_instance() {
    return reinterpret_cast<const mobile*>(
               &_mobile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(mobile& a, mobile& b) {
    a.Swap(&b);
  }
  inline void Swap(mobile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mobile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mobile* New() const final {
    return CreateMaybeMessage<mobile>(nullptr);
  }

  mobile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mobile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mobile& from);
  void MergeFrom(const mobile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mobile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IOT.mobile";
  }
  protected:
  explicit mobile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_init_2eproto);
    return ::descriptor_table_init_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // uint32 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IOT.mobile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  float value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2eproto;
};
// -------------------------------------------------------------------

class iot_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IOT.iot_data) */ {
 public:
  inline iot_data() : iot_data(nullptr) {};
  virtual ~iot_data();

  iot_data(const iot_data& from);
  iot_data(iot_data&& from) noexcept
    : iot_data() {
    *this = ::std::move(from);
  }

  inline iot_data& operator=(const iot_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline iot_data& operator=(iot_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iot_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iot_data* internal_default_instance() {
    return reinterpret_cast<const iot_data*>(
               &_iot_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(iot_data& a, iot_data& b) {
    a.Swap(&b);
  }
  inline void Swap(iot_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iot_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iot_data* New() const final {
    return CreateMaybeMessage<iot_data>(nullptr);
  }

  iot_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iot_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iot_data& from);
  void MergeFrom(const iot_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iot_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IOT.iot_data";
  }
  protected:
  explicit iot_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_init_2eproto);
    return ::descriptor_table_init_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .IOT.iot data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::IOT::iot& data() const;
  ::IOT::iot* release_data();
  ::IOT::iot* mutable_data();
  void set_allocated_data(::IOT::iot* data);
  private:
  const ::IOT::iot& _internal_data() const;
  ::IOT::iot* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::IOT::iot* data);
  ::IOT::iot* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:IOT.iot_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IOT::iot* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2eproto;
};
// -------------------------------------------------------------------

class mobile_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IOT.mobile_data) */ {
 public:
  inline mobile_data() : mobile_data(nullptr) {};
  virtual ~mobile_data();

  mobile_data(const mobile_data& from);
  mobile_data(mobile_data&& from) noexcept
    : mobile_data() {
    *this = ::std::move(from);
  }

  inline mobile_data& operator=(const mobile_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline mobile_data& operator=(mobile_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mobile_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mobile_data* internal_default_instance() {
    return reinterpret_cast<const mobile_data*>(
               &_mobile_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(mobile_data& a, mobile_data& b) {
    a.Swap(&b);
  }
  inline void Swap(mobile_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mobile_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mobile_data* New() const final {
    return CreateMaybeMessage<mobile_data>(nullptr);
  }

  mobile_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mobile_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mobile_data& from);
  void MergeFrom(const mobile_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mobile_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IOT.mobile_data";
  }
  protected:
  explicit mobile_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_init_2eproto);
    return ::descriptor_table_init_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kOkResetFieldNumber = 2,
  };
  // .IOT.mobile config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::IOT::mobile& config() const;
  ::IOT::mobile* release_config();
  ::IOT::mobile* mutable_config();
  void set_allocated_config(::IOT::mobile* config);
  private:
  const ::IOT::mobile& _internal_config() const;
  ::IOT::mobile* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::IOT::mobile* config);
  ::IOT::mobile* unsafe_arena_release_config();

  // bool ok_reset = 2;
  void clear_ok_reset();
  bool ok_reset() const;
  void set_ok_reset(bool value);
  private:
  bool _internal_ok_reset() const;
  void _internal_set_ok_reset(bool value);
  public:

  // @@protoc_insertion_point(class_scope:IOT.mobile_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IOT::mobile* config_;
  bool ok_reset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// iot

// string key = 1;
inline void iot::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& iot::key() const {
  // @@protoc_insertion_point(field_get:IOT.iot.key)
  return _internal_key();
}
inline void iot::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:IOT.iot.key)
}
inline std::string* iot::mutable_key() {
  // @@protoc_insertion_point(field_mutable:IOT.iot.key)
  return _internal_mutable_key();
}
inline const std::string& iot::_internal_key() const {
  return key_.Get();
}
inline void iot::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void iot::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IOT.iot.key)
}
inline void iot::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IOT.iot.key)
}
inline void iot::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IOT.iot.key)
}
inline std::string* iot::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* iot::release_key() {
  // @@protoc_insertion_point(field_release:IOT.iot.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void iot::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IOT.iot.key)
}
inline std::string* iot::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IOT.iot.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void iot::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IOT.iot.key)
}

// string macAddress = 2;
inline void iot::clear_macaddress() {
  macaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& iot::macaddress() const {
  // @@protoc_insertion_point(field_get:IOT.iot.macAddress)
  return _internal_macaddress();
}
inline void iot::set_macaddress(const std::string& value) {
  _internal_set_macaddress(value);
  // @@protoc_insertion_point(field_set:IOT.iot.macAddress)
}
inline std::string* iot::mutable_macaddress() {
  // @@protoc_insertion_point(field_mutable:IOT.iot.macAddress)
  return _internal_mutable_macaddress();
}
inline const std::string& iot::_internal_macaddress() const {
  return macaddress_.Get();
}
inline void iot::_internal_set_macaddress(const std::string& value) {
  
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void iot::set_macaddress(std::string&& value) {
  
  macaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IOT.iot.macAddress)
}
inline void iot::set_macaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IOT.iot.macAddress)
}
inline void iot::set_macaddress(const char* value,
    size_t size) {
  
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IOT.iot.macAddress)
}
inline std::string* iot::_internal_mutable_macaddress() {
  
  return macaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* iot::release_macaddress() {
  // @@protoc_insertion_point(field_release:IOT.iot.macAddress)
  return macaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void iot::set_allocated_macaddress(std::string* macaddress) {
  if (macaddress != nullptr) {
    
  } else {
    
  }
  macaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), macaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IOT.iot.macAddress)
}
inline std::string* iot::unsafe_arena_release_macaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IOT.iot.macAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return macaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void iot::unsafe_arena_set_allocated_macaddress(
    std::string* macaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (macaddress != nullptr) {
    
  } else {
    
  }
  macaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      macaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IOT.iot.macAddress)
}

// repeated float sensor = 3;
inline int iot::_internal_sensor_size() const {
  return sensor_.size();
}
inline int iot::sensor_size() const {
  return _internal_sensor_size();
}
inline void iot::clear_sensor() {
  sensor_.Clear();
}
inline float iot::_internal_sensor(int index) const {
  return sensor_.Get(index);
}
inline float iot::sensor(int index) const {
  // @@protoc_insertion_point(field_get:IOT.iot.sensor)
  return _internal_sensor(index);
}
inline void iot::set_sensor(int index, float value) {
  sensor_.Set(index, value);
  // @@protoc_insertion_point(field_set:IOT.iot.sensor)
}
inline void iot::_internal_add_sensor(float value) {
  sensor_.Add(value);
}
inline void iot::add_sensor(float value) {
  _internal_add_sensor(value);
  // @@protoc_insertion_point(field_add:IOT.iot.sensor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
iot::_internal_sensor() const {
  return sensor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
iot::sensor() const {
  // @@protoc_insertion_point(field_list:IOT.iot.sensor)
  return _internal_sensor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
iot::_internal_mutable_sensor() {
  return &sensor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
iot::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:IOT.iot.sensor)
  return _internal_mutable_sensor();
}

// -------------------------------------------------------------------

// mobile

// string key = 1;
inline void mobile::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& mobile::key() const {
  // @@protoc_insertion_point(field_get:IOT.mobile.key)
  return _internal_key();
}
inline void mobile::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:IOT.mobile.key)
}
inline std::string* mobile::mutable_key() {
  // @@protoc_insertion_point(field_mutable:IOT.mobile.key)
  return _internal_mutable_key();
}
inline const std::string& mobile::_internal_key() const {
  return key_.Get();
}
inline void mobile::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void mobile::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IOT.mobile.key)
}
inline void mobile::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IOT.mobile.key)
}
inline void mobile::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IOT.mobile.key)
}
inline std::string* mobile::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* mobile::release_key() {
  // @@protoc_insertion_point(field_release:IOT.mobile.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mobile::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IOT.mobile.key)
}
inline std::string* mobile::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IOT.mobile.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void mobile::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IOT.mobile.key)
}

// float value = 2;
inline void mobile::clear_value() {
  value_ = 0;
}
inline float mobile::_internal_value() const {
  return value_;
}
inline float mobile::value() const {
  // @@protoc_insertion_point(field_get:IOT.mobile.value)
  return _internal_value();
}
inline void mobile::_internal_set_value(float value) {
  
  value_ = value;
}
inline void mobile::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:IOT.mobile.value)
}

// uint32 index = 3;
inline void mobile::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mobile::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mobile::index() const {
  // @@protoc_insertion_point(field_get:IOT.mobile.index)
  return _internal_index();
}
inline void mobile::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void mobile::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:IOT.mobile.index)
}

// -------------------------------------------------------------------

// iot_data

// .IOT.iot data = 1;
inline bool iot_data::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool iot_data::has_data() const {
  return _internal_has_data();
}
inline void iot_data::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::IOT::iot& iot_data::_internal_data() const {
  const ::IOT::iot* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::IOT::iot*>(
      &::IOT::_iot_default_instance_);
}
inline const ::IOT::iot& iot_data::data() const {
  // @@protoc_insertion_point(field_get:IOT.iot_data.data)
  return _internal_data();
}
inline void iot_data::unsafe_arena_set_allocated_data(
    ::IOT::iot* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IOT.iot_data.data)
}
inline ::IOT::iot* iot_data::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IOT::iot* iot_data::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:IOT.iot_data.data)
  
  ::IOT::iot* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::IOT::iot* iot_data::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::IOT::iot>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::IOT::iot* iot_data::mutable_data() {
  // @@protoc_insertion_point(field_mutable:IOT.iot_data.data)
  return _internal_mutable_data();
}
inline void iot_data::set_allocated_data(::IOT::iot* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:IOT.iot_data.data)
}

// -------------------------------------------------------------------

// mobile_data

// .IOT.mobile config = 1;
inline bool mobile_data::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool mobile_data::has_config() const {
  return _internal_has_config();
}
inline void mobile_data::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::IOT::mobile& mobile_data::_internal_config() const {
  const ::IOT::mobile* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::IOT::mobile*>(
      &::IOT::_mobile_default_instance_);
}
inline const ::IOT::mobile& mobile_data::config() const {
  // @@protoc_insertion_point(field_get:IOT.mobile_data.config)
  return _internal_config();
}
inline void mobile_data::unsafe_arena_set_allocated_config(
    ::IOT::mobile* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IOT.mobile_data.config)
}
inline ::IOT::mobile* mobile_data::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IOT::mobile* mobile_data::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:IOT.mobile_data.config)
  
  ::IOT::mobile* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::IOT::mobile* mobile_data::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::IOT::mobile>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::IOT::mobile* mobile_data::mutable_config() {
  // @@protoc_insertion_point(field_mutable:IOT.mobile_data.config)
  return _internal_mutable_config();
}
inline void mobile_data::set_allocated_config(::IOT::mobile* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:IOT.mobile_data.config)
}

// bool ok_reset = 2;
inline void mobile_data::clear_ok_reset() {
  ok_reset_ = false;
}
inline bool mobile_data::_internal_ok_reset() const {
  return ok_reset_;
}
inline bool mobile_data::ok_reset() const {
  // @@protoc_insertion_point(field_get:IOT.mobile_data.ok_reset)
  return _internal_ok_reset();
}
inline void mobile_data::_internal_set_ok_reset(bool value) {
  
  ok_reset_ = value;
}
inline void mobile_data::set_ok_reset(bool value) {
  _internal_set_ok_reset(value);
  // @@protoc_insertion_point(field_set:IOT.mobile_data.ok_reset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IOT

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_init_2eproto
